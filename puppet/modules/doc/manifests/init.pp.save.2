# DevOps Challenge alias DOC class with the site name parameter
class doc (
	$sitename = "example.com",
	$username = "ubuntu",
) {
        # GIT installation and setting for Andras
	class gitinstall {
	        class { 'git': } ->
	        git::config { 'color.ui':
        	        value => 'true',
	        } ->
	        git::config { 'user.name':
        	        value => 'andrasvarga',
	        } ->
	        git::config { 'user.email':
        	        value => 'andras.varga.90@gmail.com',
	        }
	}

	class drupal-config {
		file { "/var/${doc::sitename}/web/sites/default/settings.php" :
                        ensure  => present,
                        content => template('doc/settings.php.erb'),
                } ->
                file { "/var/${doc::sitename}/web/profiles/awsprofile" :
                        source  => "puppet:///modules/doc/awsprofile",
                        recurse => true,
                } ->
		file { "/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}" :
                        ensure  => directory,
                } ->
                file { "/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}/sync" :
                        ensure  => directory,
			require => File["/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}"],
                } ->
                file { "/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}/active" :
                        ensure  => directory,
			require => File["/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}"],
                } ->
                file { "/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}/staging" :
                        ensure  => directory,
			require => File["/var/${doc::sitename}/web/sites/default/files/config_${::drupalslt}"],
                } ->

		exec { "/bin/chown -R www-data /var/${doc::sitename}/web/sites/default/files": }
		exec { "/bin/chmod -R 755 /var/${doc::sitename}/web/sites/default/files": }
	}

	class drupal-site-install {
		file { "/var/tmp/db-check.sh" :
                        ensure => present,
                        content => template('doc/db-check.sh.erb'),
                } ->
		exec { "/bin/chmod +x /var/tmp/db-check.sh": } ->
                exec { 'drush site-install':
			cwd	=> "/var/${doc::sitename}/web",
			command => "/var/${doc::sitename}/vendor/bin/drush site-install awsprofile --yes --site-name=${doc::sitename} --account-name=${::drupalusr} --account-pass=${::drupalpsw}",
                        unless	=> "/var/tmp/db-check.sh",
			user	=> www-data,
                }
	}

        class drupalsetup {

		exec { 'service apache2 stop':
                        command         => '/usr/bin/service apache2 stop',
                } ->
                apache::vhost { $doc::sitename:
                        ensure          => present,
                        port            => '80',
                        manage_docroot  => false,
                        docroot         => "/var/${doc::sitename}/web",
                        docroot_owner   => $doc::username,
                        override        => 'All',
                } ->
                exec { 'service apache2 start':
                        command         => '/usr/bin/service apache2 start',
                } ->
		exec { "/sbin/swapon /var/swap.1":
			unless		=> "/sbin/swapon -s | grep swap.1",
		} ->
		class { 'composer':
			download_method => 'wget',
			# composer_home   => "/home/${doc::username}",
			composer_home	=> "/root",
			suhosin_enabled => false,
		} ->
		exec { "composer create-project":
			command		=> "/usr/local/bin/composer create-project drupal-composer/drupal-project:8.x ${doc::sitename} --stability dev --no-interaction",
			cwd		=> "/var",
			user            => root,
                        environment     => "COMPOSER_HOME=${composer::composer_home}",
			unless		=> "/usr/bin/test -f /var/${doc::sitename}/composer.json",
		} ->
		# exec { "composer require drupal/s3fs" :
		#	command		=> "/usr/local/bin/composer require drupal/s3fs:8.*",
		#	cwd		=> "/var/${doc::sitename}",
		#	user		=> root,
		#	environment	=> "COMPOSER_HOME=${composer::composer_home}",
		#	unless		=> "/usr/bin/test -f /var/${doc::sitename}/web/modules/contrib/s3fs/composer.json",
		# } ->
		exec { "composer require drupal/s3fs" :
                        command         => "/usr/local/bin/composer require drupal/s3fs:8.*",
                        cwd             => "/var/${doc::sitename}",
                        user            => root,
                        environment     => "COMPOSER_HOME=${composer::composer_home}",
                        unless          => "/usr/bin/test -f /var/${doc::sitename}/web/modules/contrib/s3fs/composer.json",
                } ->
		composer::exec { 'install':
			cmd			=> 'install',
			cwd			=> "/var/${doc::sitename}",
			dry_run			=> false,
			custom_installers	=> true,
			timeout			=> 400,
			interaction		=> false,
			user			=> root,
			unless			=> "test -f /var/${doc::sitename}/composer.lock",
                } ->

		class { 'drupal-config': }

		# class { 'drupal-site-install': }
        }

	# LAMP-stack Installation from other custom modules and declare the defined classes runs only if the site name is not undefined!
	if $sitename != undef {
		class { 'lamp': } ->
		class { 'gitinstall': } ->
		# class {'drush::git::drush':
		#	git_branch => '8.x',
		# }
		class { 'drupalsetup': }
	}
}
