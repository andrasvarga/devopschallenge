require 'base64'
require 'net/http'
require 'uri'
require './settings'
require './helpers'
require './controllers'

USAGE = <<ENDUSAGE
Usage:
   ruby cli.rb create [--name=stack_name] [--site-name=sitename.com] [--instance-type=t2.micro] [--instance-count=2] [--db-name=drupal] [--db-user=drupal] [--db-pass=B8k9OlHk] [--db-size=5] [--db-type=db.t2.micro] [--multi-az] [--drupal-u=admin] [--drupal-p=f9Eg73Hk]
   ruby cli.rb delete [--name=stack_name]
   ruby cli.rb test [--name=stack_name]
ENDUSAGE

HELP = <<ENDHELP
   -h, --help       Show this help.

   create           Create new AWS HA stack based on a tmeplate with:
                    ELB, ASG (EC2), RDS, S3, Drupal install
                    The following arguments can be used:
   --name           The name of the new stack
                    Required!                 
   --site-name      The name of the drupal website
                    Default: newsite.com
   --instance-type  EC2 instance class in the AutoScale Group
                    Allowed:
                    - t1.micro
                    - t2.nano
                    - t2.micro
                    - t2.small
                    - t2.medium
                    - t2.large
                    - m1.small
                    - m1.medium
                    - m1.large
                    - m1.xlarge
                    - m2.xlarge
                    - m2.2xlarge
                    - m2.4xlarge
                    - m3.medium
                    - m3.large
                    - m3.xlarge
                    - m3.2xlarge
                    - m4.large
                    - m4.xlarge
                    - m4.2xlarge
                    - m4.4xlarge
                    - m4.10xlarge
                    - c1.medium
                    - c1.xlarge
                    - c3.large
                    - c3.xlarge
                    - c3.2xlarge
                    - c3.4xlarge
                    - c3.8xlarge
                    - c4.large
                    - c4.xlarge
                    - c4.2xlarge
                    - c4.4xlarge
                    - c4.8xlarge
                    - g2.2xlarge
                    - g2.8xlarge
                    - r3.large
                    - r3.xlarge
                    - r3.2xlarge
                    - r3.4xlarge
                    - r3.8xlarge
                    - i2.xlarge
                    - i2.2xlarge
                    - i2.4xlarge
                    - i2.8xlarge
                    - d2.xlarge
                    - d2.2xlarge
                    - d2.4xlarge
                    - d2.8xlarge
                    - hi1.4xlarge
                    - hs1.8xlarge
                    - cr1.8xlarge
                    - cc2.8xlarge
                    - cg1.4xlarge
   --instance-count Number of desired EC2 instances in the AutoScale Group
                    Default: 2
                    Min:     2
                    Max:     10
   --db-name        The name of the database
                    Default: drupal
   --db-user        Default database user
                    Default: drupal
   --db-pass        Password for the default database user
                    Randomly generated by default
   --db-size        Database allocated storage in GB.
                    Default: 5
                    Min:     5
                    Max:     1024
   --db-type        Database instance class
                    Allowed:
                    - db.t1.micro
                    - db.m1.small
                    - db.m1.medium
                    - db.m1.large
                    - db.m1.xlarge
                    - db.m2.xlarge
                    - db.m2.2xlarge
                    - db.m2.4xlarge
                    - db.m3.medium
                    - db.m3.large
                    - db.m3.xlarge
                    - db.m3.2xlarge
                    - db.m4.large
                    - db.m4.xlarge
                    - db.m4.2xlarge
                    - db.m4.4xlarge
                    - db.m4.10xlarge
                    - db.r3.large
                    - db.r3.xlarge
                    - db.r3.2xlarge
                    - db.r3.4xlarge
                    - db.r3.8xlarge
                    - db.m2.xlarge
                    - db.m2.2xlarge
                    - db.m2.4xlarge
                    - db.cr1.8xlarge
                    - db.t2.micro
                    - db.t2.small
                    - db.t2.medium
                    - db.t2.large
   --multi-az       Launch with a multi-az database
   --drupal-u       Drupal user name
                    Default: admin
   --drupal-p       Password for the default drupal user
                    Randomly generated by default
   
   delete           Deletes a HA stack
                    The following arguments can be used:
   --name           Name of the HA stack to delete
                    Required!

   test             Tests the avaiability of a stack front-end
                    The following arguments can be used:
   --name           Name of the HA stack to test
                    Required!

ENDHELP

args = Hash[ ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/) ]

vargs = Hash.new
params = Hash.new

## unflagged options
ARGV.each do |opt|
    case opt
        when 'create'    then vargs[:create]    = true
        when 'delete'    then vargs[:delete]    = true
        when 'test'      then vargs[:test]      = true
    end
end

## flagged args
args.each do |key, arg|
    case key
        when 'h', 'help'        then vargs[:help]                 = true
        when 'name'             then params['stackName']          = arg
        when 'site-name'        then params['SiteName']           = arg
        when 'instance-type'    then params['InstanceType']       = arg
        when 'instance-count'   then params['InstanceCount']      = arg
        when 'db-name'          then params['DBName']             = arg
        when 'db-user'          then params['DBUser']             = arg
        when 'db-pass'          then params['DBPassword']         = arg
        when 'db-size'          then params['DBAllocatedStorage'] = arg
        when 'db-type'          then params['DBInstanceClass']    = arg
        when 'multi-az'         then params['MultiAZDatabase']    = "true"
        when 'drupal-u'         then params['DrupalUser']         = arg
        when 'drupal-p'         then params['DrupalPassword']     = arg
    end
end

if vargs[:help]
  puts USAGE
  puts HELP
  exit
end

if ( vargs[:create] && vargs[:delete] ) || ( vargs[:create] && vargs[:test] ) || ( vargs[:test] && vargs[:delete] )
    puts "Can not use more options in the same command! Use -h or --help for syntax."
    exit
end

if !vargs[:create] && !vargs[:delete] && !vargs[:test] 
    puts "Please use an option! Use -h or --help for syntax."
    exit
end

if vargs[:create]
    begin	
		vparams = ServerHelpers.validate(params)
	rescue ArgumentError => e
        puts "Error:"
		puts e.message
		exit
	end

    begin
		stack_details = ServerControllers.create_stack(vparams)
	rescue StandardError => e
        puts "Error:"
		puts e.message
		exit
	end

	if stack_details['status_message'] == "CREATE_IN_PROGRESS"
        puts
        puts "Creation initiated"
        puts 
        puts "Stack ID:"
		puts stack_details['stack_id']
        puts "Status message:"
		puts stack_details['status_message']
        puts "Drupal username:"
		puts vparams['DrupalUser']
        puts "Drupal password:"
		puts vparams['DrupalPassword']
		exit
	else
        puts "Creation interrupted, status:"
		puts status_message
		exit
	end    
end

if vargs[:delete]
    confirm = ''
    until confirm == 'y' || confirm == 'n' do
        puts "Are you sure? The CloudFormation stack will be deleted, only the S3 bucket will be retained. (y/n)"
        confirm = $stdin.gets.chomp
    end

    if confirm == 'y'
        puts "Deleting #{params['stackName']}"

        begin
			status_message = ServerControllers.delete_stack(params['stackName'])
		rescue StandardError => e
            puts "Error"
			puts e.message
			exit
		end
		
		if status_message == "DELETE_IN_PROGRESS"
            puts "Deletion initiated"
			puts status_message
			exit
		else
            puts "Error"
			puts status_message
			exit
		end

        exit
    else
        puts "Cancelled by user"
        exit
    end 
end

if vargs[:test]
		
        begin
            stack = params['stackName'] 
            client = Aws::CloudFormation::Client.new( region: $aws_region )
            stack_description = client.describe_stacks({ stack_name: stack })
            if stack_description.stacks[0].stack_status == "CREATE_IN_PROGRESS"
                puts "Stack is being created. Try again later!"
                exit
            else
			    uri_temp = stack_description.stacks[0].outputs[0].output_value
            end
        rescue StandardError => e
            "Error"
            puts e.message                
            exit
        end

        puts ""		
	    puts "Starting drupal test on:"
	    puts uri_temp

    	uri = URI.parse(uri_temp)

        begin
	        http = Net::HTTP.new(uri.host, 80)
            http.open_timeout = 10
            http.read_timeout = 10
	        request = Net::HTTP::Get.new(uri.to_s)
	        response = http.request(request)
        rescue TimeoutError => e
            "Time Out"
            puts e.message
            exit
        end

		response_lines = response.body.lines.map(&:chomp)

		# output
		puts
		puts "Status code: #{response.code}"
		puts
		puts "Content (first 10 lines):"
		puts
		for i in 0..9
			puts response_lines[i]
		end
		puts
end